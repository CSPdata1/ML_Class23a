import numpy as np
import matplotlib.pyplot as plt
# Simulating a fair six-sided die roll
outcomes = np.arange(1, 7)
probabilities = np.ones(6) / 6
# Visualizing the probability distribution
plt.bar(outcomes, probabilities, color='skyblue')
plt.title('Probability Distribution of a Fair Six-sided Die')
plt.xlabel('Outcome')
plt.ylabel('Probability')
plt.show()
# Simulating a continuous random variable (e.g., normal distribution)
mean = 0
std_dev = 1
samples = np.random.normal(mean, std_dev, 1000)
# Visualizing the distribution
plt.hist(samples, bins=30, density=True, color='lightcoral')
plt.title('Normal Distribution - Random Variable Example')
plt.xlabel('Value')
plt.ylabel('Probability Density')
plt.show()
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import datasets
from sklearn import metrics
# Load Iris dataset
iris = datasets.load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3, random_state=42)
# Bayesian classifier
model = GaussianNB()
model.fit(X_train, y_train)
# Predictions
predictions = model.predict(X_test)
# Model accuracy
accuracy = metrics.accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")
reticulate::repl_python()
install.packages("JuliaCall")
install.packages("Julia")
install.packages("JuliaConnectoR")
library(Julia)
library(JuliaCall)
library(JuliaConnectoR)
